plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com'
version '1.0'

mainClassName = 'com.gymbro.Launcher'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.1'
}

sourceCompatibility = '11'
targetCompatibility = '11'

//import org.apache.tools.ant.taskdefs.condition.Os
//if(Os.isFamily(Os.FAMILY_WINDOWS)){
//    compileJava.options.fork = true
//    compileJava.options.forkOptions.executable = "$projectDir/.jdks/jdk-11.0.19+7-windows/bin/javac.exe"
//}
//else if(Os.isFamily(Os.FAMILY_UNIX)){
//    compileJava.options.fork = true
//    compileJava.options.forkOptions.executable = "$projectDir/.jdks/jdk-11.0.19+7-linux/bin/javac"
//}
//else if(Os.isFamily(Os.FAMILY_MAC)){
//    compileJava.options.fork = true
//    compileJava.options.forkOptions.executable = "$projectDir/.jdks/jdk-11.0.19+7-mac/bin/javac"
//}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.gymbro'
    mainClass = "$mainClassName"
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('net.synedra:validatorfx:0.4.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.ikonli:ikonli-javafx:11.5.0')
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
    archiveFileName = "GymBro-fat.jar"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
